[gd_scene load_steps=4 format=3 uid="uid://c1hndeymman77"]

[ext_resource type="Script" path="res://scripts/BattleScene/play_grid.gd" id="1_cirfp"]
[ext_resource type="TileSet" uid="uid://bwrw0fmk6kjs0" path="res://assets/background/tiles/battleTileSet.tres" id="2_wldgq"]

[sub_resource type="GDScript" id="GDScript_xboog"]
resource_name = "BattleTileMap"
script/source = "extends TileMap

var astar = AStarGrid2D.new();

var horizontial = 5;
var vertical = 5;

enum mapLayer {
	base,
	obstacle,
	cursorOverlay1
}
var charOccupied = {};
var tileDict = {
	\"grass\": Vector2(5,0),
	\"dirt\": Vector2(6,0),
	\"campfire\": Vector2(15,8),
	\"border\" : Vector2(56,26)
}
var map_rect = Rect2i();



# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	add_layer(1);
	pass;
	
func InitTile(gridX : int, gridY : int) -> void:
	vertical = gridX;
	horizontial = gridY;
	
	InitAStar();
	
	set_cell(mapLayer.obstacle, Vector2(5,5), 0, tileDict[\"campfire\"], 0 );
	set_cell(mapLayer.obstacle, Vector2(5,6), 0, tileDict[\"campfire\"], 0 );
	set_cell(mapLayer.obstacle, Vector2(6,5), 0, tileDict[\"campfire\"], 0 );
	
	for x in gridX:
		for y in gridY:
			set_cell(mapLayer.base, Vector2(x,y), 0, tileDict[\"grass\"], 0 );
			
			var coords = Vector2i(x,y);
			var tile_data = get_cell_tile_data(1, coords);
			if tile_data and tile_data.get_custom_data(\"type\") == \"obstacle\":
				astar.set_point_solid(coords);
				

func InitAStar() -> void:
	# set astar for tilemap
	var tilemap_size = get_used_rect().end - get_used_rect().position;
	map_rect = Rect2i(Vector2i.ZERO, tilemap_size);
	
	var tile_size = get_tileset().tile_size;
	
	astar.region = map_rect;
	astar.cell_size = tile_size;
	astar.default_compute_heuristic = AStarGrid2D.HEURISTIC_MANHATTAN;
	astar.default_estimate_heuristic = AStarGrid2D.HEURISTIC_MANHATTAN;
	astar.diagonal_mode = AStarGrid2D.DIAGONAL_MODE_NEVER;
	astar.update();

# grid Access functions
func IsValidCell(worldCoord : Vector2) -> bool:
	var map_position = local_to_map(to_local(worldCoord));
	return map_rect.has_point(map_position) and not astar.is_point_solid(map_position) and not IsCharOccupied(map_position);

func IsInGrid(worldCoord : Vector2) -> bool :
	var tile = local_to_map(to_local(worldCoord));
	if(tile.x >= vertical || tile.x < 0):
		return false;
	if(tile.y >= horizontial || tile.y < 0):
		return false;
	return true;

func GetGridPosViaGridCoord(gridCoord : Vector2) -> Vector2:
	return to_global( map_to_local(gridCoord));
	
func GetGridWorldPosViaWorldCoord(worldCoord : Vector2) -> Vector2:
	var tile = local_to_map(to_local(worldCoord));
	print(tile);
	return to_global( map_to_local(tile));

# char position
func SetCharLocationOnGrid(worldCoord : Vector2, character : Variant):
	var map_position = local_to_map(to_local(worldCoord));
	charOccupied[map_position] = character;
	astar.set_point_solid(map_position, true);

func RemoveCharLocationOnGrid(worldCoord : Vector2, character : Variant):
	var map_position = local_to_map(to_local(worldCoord));
	charOccupied.erase(map_position);
	astar.set_point_solid(map_position, false);

func IsCharOccupied( gridCoord : Vector2i ) -> bool:
	return charOccupied.has(gridCoord);

# pathfinding
func IsPointWalkable(worldCoord : Vector2):
	var map_position = local_to_map(to_local(worldCoord));
	if map_rect.has_point(map_position) and not astar.is_point_solid(map_position) and not IsCharOccupied(map_position):
		return true
	else:
		return false

func GetPath(fromWorldCoord : Vector2, toWorldCoord: Vector2) -> Array[Vector2]:
	var path = astar.get_id_path(
		local_to_map(to_local(fromWorldCoord)),
		local_to_map(to_local(toWorldCoord))
	).slice(1);
	var worldPath : Array[Vector2];
	for coord in path:
		worldPath.append( to_global( map_to_local(coord)));
	return worldPath;


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
	SetMouseHighlightOnGrid();
		
func SetMouseHighlightOnGrid() -> void:
	for x in vertical:
		for y in horizontial:
			erase_cell(mapLayer.cursorOverlay1, Vector2(x,y));
	var tile = local_to_map(to_local(get_global_mouse_position()));
	if IsInGrid(get_global_mouse_position()):
		set_cell(mapLayer.cursorOverlay1, tile, 1, tileDict[\"border\"], 0 );
"

[node name="PlayGrid" type="Node2D"]
script = ExtResource("1_cirfp")

[node name="TileMap" type="TileMap" parent="."]
position = Vector2(-37, -28)
tile_set = ExtResource("2_wldgq")
format = 2
layer_0/name = "MapLayer"
layer_0/tile_data = PackedInt32Array(-1, 327680, 0, -65536, 327680, 0, 0, 327680, 0, 65535, 327680, 0, 2621513, 196609, 1, 2687049, 196609, 1, 2687048, 196609, 1, 2687047, 196609, 1)
layer_1/name = "MouseOverlay"
layer_1/z_index = 1
layer_1/navigation_enabled = false
script = SubResource("GDScript_xboog")
